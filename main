from fastapi import FastAPI, status, Body, HTTPException, Path, Request
from pydantic import BaseModel
from typing import List, Type
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()

templates = Jinja2Templates(directory='templates2')

users = []

class User(BaseModel):
    id: int
    username: str
    age: str

@app.get('/users')
async def get_users() -> List[User]:
    return users

@app.post('/user/{username}/{age}')
async def post_user(username: str, age: int) -> User:
    new_id = 1 if not users else max(user.id for user in users) + 1
    new_user = User(id=new_id, username=username, age=age)
    users.append(new_user)
    return new_user

@app.put('/user/{user_id}/{username}/{age}')
async def put_user(user_id: int, username: str, age: int) -> User:
    user = next((user for user in users if user.id == user_id), None)
    try:
        user.username = username
        user.age = age
        return user
    except:
        raise HTTPException(status_code=404, detail="User was not found")

@app.delete('/user/{user_id}')
async def delete_user(user_id: int) -> Type[User]:
    try:
        users.pop(user_id)
        return User
    except:
        raise HTTPException(status_code=404, detail="User was not found")


@app.get('/')
async def root(request: Request):
  return templates.TemplateResponse("users.html", {"request": request, "users": users})

@app.get('/user/{user_id}')
async def get_user(request: Request, user_id: int):
  user = next((user for user in users if user.id == user_id), None)
  if user:
    return templates.TemplateResponse("users.html", {"request": request, "user": user})
  else:
    raise HTTPException(status_code=404, detail="User was not found")

